name: Recursive Rust check/build/test

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  full:
    # If you want to do a CI check for your commit, include `[ci]` (or `[CI]`) anywhere in the git commit message.
    if: "contains(github.event.head_commit.message, '[ci]')" # Second parameter is not case sensitive.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Test `cargo check/build/test` on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false

    env:
      CARGO_TERM_COLOR: always

    steps:
    - uses: actions/checkout@v3
    - name: Clone whole Rust workspace
      shell: bash
      run: |
        rm -r cloned_ci || true
        git clone https://github.com/VRACware/vrac --recurse-submodules cloned_ci
    # - name: Debug submodule directories
    #   shell: bash
    #   run: |
    #     cd cloned_ci
    #     printf "\n        Vrac submodules: \n\n"
    #     git submodule foreach --recursive pwd
    - name: Check each
      shell: bash
      run: |
        cd cloned_ci
        cargo check --verbose
        printf "\n        Top-level Vrac done. Now its submodules: \n\n"
        git submodule foreach --recursive pwd && cargo check
    - name: Build each
      shell: bash
      run: |
        cd cloned_ci
        cargo build --verbose
        printf "\n        Top-level Vrac done. Now its submodules: .\n\n"
        git submodule foreach --recursive pwd && cargo build
    - name: Test each
      shell: bash
      run: |
        cd cloned_ci
        cargo test --verbose
        printf "\n        Top-level Vrac done. Now its submodules: \n\n"
        git submodule foreach --recursive pwd && cargo test
